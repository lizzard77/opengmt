// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenGMT;

#nullable disable

namespace OpenGMT.Migrations
{
    [DbContext(typeof(OpenGMTContext))]
    partial class OpenGMTContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("OpenGMT.Attack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Damage")
                        .HasColumnType("TEXT");

                    b.Property<string>("DamageType")
                        .HasColumnType("TEXT");

                    b.Property<string>("HitModifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Range")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.ToTable("Attack", (string)null);
                });

            modelBuilder.Entity("OpenGMT.Creature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HPMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HPTemporary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reach")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SceneId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SheetURL")
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("Creatures", (string)null);
                });

            modelBuilder.Entity("OpenGMT.CreatureState", b =>
                {
                    b.Property<long>("CreatureStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatureId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SceneId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VisionDim")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VisionNormal")
                        .HasColumnType("INTEGER");

                    b.Property<long>("X")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("CreatureStateId");

                    b.HasIndex("CreatureId");

                    b.HasIndex("MapId");

                    b.HasIndex("SceneId");

                    b.ToTable("CreatureState", (string)null);
                });

            modelBuilder.Entity("OpenGMT.Map", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("FootPerSquare")
                        .HasColumnType("TEXT");

                    b.Property<float>("GridOpacity")
                        .HasColumnType("REAL");

                    b.Property<decimal>("HeightInSquares")
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrlDM")
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageWidth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WidthInSquares")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Map", (string)null);
                });

            modelBuilder.Entity("OpenGMT.Scene", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Scenes", (string)null);
                });

            modelBuilder.Entity("OpenGMT.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CurrentSceneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentSceneId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("OpenGMT.Attack", b =>
                {
                    b.HasOne("OpenGMT.Creature", null)
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureId");
                });

            modelBuilder.Entity("OpenGMT.Creature", b =>
                {
                    b.HasOne("OpenGMT.Scene", null)
                        .WithMany("Creatures")
                        .HasForeignKey("SceneId");
                });

            modelBuilder.Entity("OpenGMT.CreatureState", b =>
                {
                    b.HasOne("OpenGMT.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId");

                    b.HasOne("OpenGMT.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("OpenGMT.Scene", null)
                        .WithMany("CreatureStates")
                        .HasForeignKey("SceneId");

                    b.Navigation("Creature");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("OpenGMT.Scene", b =>
                {
                    b.HasOne("OpenGMT.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("OpenGMT.Session", b =>
                {
                    b.HasOne("OpenGMT.Scene", "CurrentScene")
                        .WithMany()
                        .HasForeignKey("CurrentSceneId");

                    b.Navigation("CurrentScene");
                });

            modelBuilder.Entity("OpenGMT.Creature", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("OpenGMT.Scene", b =>
                {
                    b.Navigation("CreatureStates");

                    b.Navigation("Creatures");
                });
#pragma warning restore 612, 618
        }
    }
}

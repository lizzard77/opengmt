// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenGMT;

#nullable disable

namespace OpenGMT.Migrations
{
    [DbContext(typeof(OpenGMTContext))]
    [Migration("20220916110601_AssetsUri")]
    partial class AssetsUri
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("CreatureScene", b =>
                {
                    b.Property<long>("CreaturesId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ScenesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CreaturesId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("CreatureScene");
                });

            modelBuilder.Entity("OpenGMT.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Loop")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OffsetSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SceneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uri")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Volume")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("OpenGMT.Attack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Damage")
                        .HasColumnType("TEXT");

                    b.Property<string>("DamageType")
                        .HasColumnType("TEXT");

                    b.Property<string>("HitModifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Range")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.ToTable("Attack");
                });

            modelBuilder.Entity("OpenGMT.Creature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AbilitiesString")
                        .HasColumnType("TEXT");

                    b.Property<string>("Actions")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Challenge")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConditionImmunities")
                        .HasColumnType("TEXT");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DamageResitances")
                        .HasColumnType("TEXT");

                    b.Property<string>("EyeColor")
                        .HasColumnType("TEXT");

                    b.Property<int>("HPMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HPTemporary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HairColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Height")
                        .HasColumnType("TEXT");

                    b.Property<int>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InventoryString")
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoneyString")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reach")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Senses")
                        .HasColumnType("TEXT");

                    b.Property<string>("SheetURL")
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillsString")
                        .HasColumnType("TEXT");

                    b.Property<string>("SkillsText")
                        .HasColumnType("TEXT");

                    b.Property<string>("SkinColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialTraits")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("WalkingSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.Property<int>("XP")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("OpenGMT.Map", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("FootPerSquare")
                        .HasColumnType("TEXT");

                    b.Property<float>("GridOpacity")
                        .HasColumnType("REAL");

                    b.Property<decimal>("HeightInSquares")
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrlDM")
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageWidth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WidthInSquares")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("OpenGMT.MapMarker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatureId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Light")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Reach")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VisionDim")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VisionNormal")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("X")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Y")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("MapId");

                    b.HasIndex("SessionId");

                    b.ToTable("MapMarker");
                });

            modelBuilder.Entity("OpenGMT.Scene", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MagicItems")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhantasticLocations")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScenesAndEncounters")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretsAndHints")
                        .HasColumnType("TEXT");

                    b.Property<string>("StrongStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("OpenGMT.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("SceneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("CreatureScene", b =>
                {
                    b.HasOne("OpenGMT.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenGMT.Scene", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenGMT.Asset", b =>
                {
                    b.HasOne("OpenGMT.Scene", null)
                        .WithMany("Assets")
                        .HasForeignKey("SceneId");
                });

            modelBuilder.Entity("OpenGMT.Attack", b =>
                {
                    b.HasOne("OpenGMT.Creature", null)
                        .WithMany("Attacks")
                        .HasForeignKey("CreatureId");
                });

            modelBuilder.Entity("OpenGMT.MapMarker", b =>
                {
                    b.HasOne("OpenGMT.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenGMT.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenGMT.Session", null)
                        .WithMany("Markers")
                        .HasForeignKey("SessionId");

                    b.Navigation("Creature");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("OpenGMT.Scene", b =>
                {
                    b.HasOne("OpenGMT.Map", "Map")
                        .WithMany("Scenes")
                        .HasForeignKey("MapId");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("OpenGMT.Session", b =>
                {
                    b.HasOne("OpenGMT.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("OpenGMT.Creature", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("OpenGMT.Map", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("OpenGMT.Scene", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("OpenGMT.Session", b =>
                {
                    b.Navigation("Markers");
                });
#pragma warning restore 612, 618
        }
    }
}
